// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package repo

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO Transactions (cid, tid, value, description)
       VALUES (?, ?, ?, ?)
`

type CreateTransactionParams struct {
	Cid         int64
	Tid         string
	Value       int64
	Description string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.Cid,
		arg.Tid,
		arg.Value,
		arg.Description,
	)
	return err
}

const getBalance = `-- name: GetBalance :one
SELECT  L.Value value,
        (SELECT SUM(value) FROM Transactions T WHERE T.cid = L.cid) balance
FROM Limits L WHERE L.cid = ?
`

type GetBalanceRow struct {
	Value   int64
	Balance sql.NullFloat64
}

func (q *Queries) GetBalance(ctx context.Context, cid int64) (GetBalanceRow, error) {
	row := q.db.QueryRowContext(ctx, getBalance, cid)
	var i GetBalanceRow
	err := row.Scan(&i.Value, &i.Balance)
	return i, err
}

const transactionHistory = `-- name: TransactionHistory :many
SELECT tid, value, description FROM Transactions  WHERE cid = ? ORDER BY tid DESC LIMIT 10
`

type TransactionHistoryRow struct {
	Tid         string
	Value       int64
	Description string
}

func (q *Queries) TransactionHistory(ctx context.Context, cid int64) ([]TransactionHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, transactionHistory, cid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionHistoryRow
	for rows.Next() {
		var i TransactionHistoryRow
		if err := rows.Scan(&i.Tid, &i.Value, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
