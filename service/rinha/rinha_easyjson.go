// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rinha

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha(in *jlexer.Lexer, out *transaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "valor":
			out.Value = int64(in.Int64())
		case "tipo":
			out.Type = string(in.String())
		case "descricao":
			out.Description = string(in.String())
		case "realizada_em":
			out.When = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha(out *jwriter.Writer, in transaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"valor\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Value))
	}
	{
		const prefix string = ",\"tipo\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"descricao\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"realizada_em\":"
		out.RawString(prefix)
		out.String(string(in.When))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v transaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v transaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *transaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *transaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha(l, v)
}
func easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha1(in *jlexer.Lexer, out *balance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int64(in.Int64())
		case "limite":
			out.Limit = int64(in.Int64())
		case "data_extracao":
			out.When = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha1(out *jwriter.Writer, in balance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Total))
	}
	{
		const prefix string = ",\"limite\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"data_extracao\":"
		out.RawString(prefix)
		out.String(string(in.When))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v balance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v balance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *balance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *balance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha1(l, v)
}
func easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha2(in *jlexer.Lexer, out *TransactResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limite":
			out.Limit = int64(in.Int64())
		case "saldo":
			out.Balance = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha2(out *jwriter.Writer, in TransactResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"limite\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"saldo\":"
		out.RawString(prefix)
		out.Int64(int64(in.Balance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha2(l, v)
}
func easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha3(in *jlexer.Lexer, out *AccountHistoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "saldo":
			(out.Balance).UnmarshalEasyJSON(in)
		case "ultimas_transacoes":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]transaction, 0, 1)
					} else {
						out.Transactions = []transaction{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 transaction
					(v1).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha3(out *jwriter.Writer, in AccountHistoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"saldo\":"
		out.RawString(prefix[1:])
		(in.Balance).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ultimas_transacoes\":"
		out.RawString(prefix)
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Transactions {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountHistoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountHistoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD49473d0EncodeGithubComAvalonbitsRinha2024ServiceRinha3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountHistoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountHistoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD49473d0DecodeGithubComAvalonbitsRinha2024ServiceRinha3(l, v)
}
